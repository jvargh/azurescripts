{
  "version": "Notebook/1.0",
  "items": [
    {
      "type": 9,
      "content": {
        "version": "KqlParameterItem/1.0",
        "parameters": [
          {
            "id": "51aa3a9b-14e0-4c22-a60d-abdbf8813f00",
            "version": "KqlParameterItem/1.0",
            "name": "Subscription",
            "type": 6,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "includeAll": false,
              "showDefault": false
            },
            "timeContext": {
              "durationMs": 86400000
            },
            "defaultValue": "value::all",
            "label": " Subscription",
            "value": [
              "value::all"
            ]
          },
          {
            "id": "f342a111-002a-47fd-807f-0d4ccac0618a",
            "version": "KqlParameterItem/1.0",
            "name": "ResourceGroup",
            "label": "Resource Group",
            "type": 2,
            "isRequired": true,
            "multiSelect": true,
            "quote": "'",
            "delimiter": ",",
            "query": "resources\r\n| distinct resourceGroup",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": [
                "value::all"
              ],
              "showDefault": false
            },
            "defaultValue": "value::all",
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources"
          },
          {
            "id": "d6776ffe-e4f6-4c08-8f9e-a2fe2b3b6634",
            "version": "KqlParameterItem/1.0",
            "name": "TagName",
            "type": 2,
            "query": "Resources\r\n| where tags != '' and tags != '[]'\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| distinct tagName\r\n| sort by tagName asc",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null,
            "label": "Tag Name"
          },
          {
            "id": "f73dc4a1-ef8b-45c5-a30b-a11bb077a3cc",
            "version": "KqlParameterItem/1.0",
            "name": "TagValue",
            "type": 2,
            "query": "Resources\r\n| mvexpand tags\r\n| extend tagName = tostring(bag_keys(tags)[0])\r\n| extend tagValue = tostring(tags[tagName])\r\n| where tags != '' and tags != '[]' and tostring(bag_keys(tags)[0]) == '{TagName}'\r\n| distinct tagValue\r\n| sort by tagValue asc",
            "crossComponentResources": [
              "{Subscription}"
            ],
            "typeSettings": {
              "additionalResourceOptions": []
            },
            "queryType": 1,
            "resourceType": "microsoft.resourcegraph/resources",
            "value": null,
            "label": "Tag Value"
          }
        ],
        "style": "pills",
        "queryType": 1,
        "resourceType": "microsoft.resourcegraph/resources"
      },
      "name": "parameters - Filters"
    },
    {
      "type": 12,
      "content": {
        "version": "NotebookGroup/1.0",
        "groupType": "editable",
        "title": "Zone Adoption",
        "items": [
          {
            "type": 9,
            "content": {
              "version": "KqlParameterItem/1.0",
              "parameters": [
                {
                  "id": "e7320c70-1ffa-4e0a-9ab8-54b064317722",
                  "version": "KqlParameterItem/1.0",
                  "name": "ZonalRegions",
                  "type": 9,
                  "description": "Regions that support availability zones",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "jsonData": "[\r\n  \"australiaeast\",\r\n  \"brazilsouth\",\r\n  \"canadacentral\",\r\n  \"centralindia\",\r\n  \"centralus\",\r\n  \"eastasia\",\r\n  \"eastus\",\r\n  \"eastus2\",\r\n  \"francecentral\",\r\n  \"germanywestcentral\",\r\n  \"israelcentral\",\r\n  \"italynorth\",\r\n  \"japaneast\",\r\n  \"japanwest\",\r\n  \"koreacentral\",\r\n  \"mexicocentral\",\r\n  \"newzealandnorth\",\r\n  \"northeurope\",\r\n  \"norwayeast\",\r\n  \"polandcentral\",\r\n  \"qatarcentral\",\r\n  \"southafricanorth\",\r\n  \"southcentralus\",\r\n  \"southeastasia\",\r\n  \"spaincentral\",\r\n  \"swedencentral\",\r\n  \"switzerlandnorth\",\r\n  \"uaenorth\",\r\n  \"uksouth\",\r\n  \"westeurope\",\r\n  \"westus2\",\r\n  \"westus3\",\r\n  \"usgovvirginia\",\r\n  \"chinanorth3\"\r\n]",
                  "timeContext": {
                    "durationMs": 86400000
                  },
                  "value": [
                    "australiaeast",
                    "brazilsouth",
                    "canadacentral",
                    "centralindia",
                    "centralus",
                    "eastasia",
                    "eastus",
                    "eastus2",
                    "francecentral",
                    "germanywestcentral",
                    "israelcentral",
                    "italynorth",
                    "japaneast",
                    "japanwest",
                    "koreacentral",
                    "mexicocentral",
                    "newzealandnorth",
                    "northeurope",
                    "norwayeast",
                    "polandcentral",
                    "qatarcentral",
                    "southafricanorth",
                    "southcentralus",
                    "southeastasia",
                    "spaincentral",
                    "swedencentral",
                    "switzerlandnorth",
                    "uaenorth",
                    "uksouth",
                    "westeurope",
                    "westus2",
                    "westus3",
                    "usgovvirginia",
                    "chinanorth3"
                  ]
                },
                {
                  "id": "ff0022fe-9804-41bc-be1d-224e96e651fd",
                  "version": "KqlParameterItem/1.0",
                  "name": "ZonalOnlyResources",
                  "type": 9,
                  "description": "List of zonal resources",
                  "multiSelect": true,
                  "quote": "'",
                  "delimiter": ",",
                  "jsonData": "[\r\n  \"microsoft.containerinstance/containergroups\",\r\n  \"microsoft.compute/hostgroups\",\r\n  \"microsoft.hdinsight/clusterpools\",\r\n  \"microsoft.storagecache/caches\",\r\n  \"microsoft.network/natgateways\",\r\n  \"microsoft.netapp/netappaccounts\",\r\n  \"microsoft.recoveryservices/vaults\",\r\n  \"microsoft.compute/virtualmachines\",\r\n  \"microsoft.connectedvmwarevsphere/clusters\"\r\n]\r\n",
                  "value": [
                    "microsoft.containerinstance/containergroups",
                    "microsoft.compute/hostgroups",
                    "microsoft.hdinsight/clusterpools",
                    "microsoft.storagecache/caches",
                    "microsoft.network/natgateways",
                    "microsoft.netapp/netappaccounts",
                    "microsoft.recoveryservices/vaults",
                    "microsoft.compute/virtualmachines",
                    "microsoft.connectedvmwarevsphere/clusters"
                  ]
                }
              ],
              "style": "pills",
              "queryType": 0,
              "resourceType": "microsoft.operationalinsights/workspaces"
            },
            "conditionalVisibility": {
              "parameterName": "isVisible",
              "comparison": "isEqualTo",
              "value": "true"
            },
            "name": "parameters - ZonalRegions"
          },
          {
            "type": 11,
            "content": {
              "version": "LinkItem/1.0",
              "style": "tabs",
              "links": [
                {
                  "id": "ca40468d-4518-43bf-ac6e-0a11d7331e12",
                  "cellValue": "SelectedSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Overview",
                  "subTarget": "Overview",
                  "style": "link"
                },
                {
                  "id": "f280fc2a-f42a-42a4-ad4b-be37ab3e8b48",
                  "cellValue": "SelectedSubTab",
                  "linkTarget": "parameter",
                  "linkLabel": "Details",
                  "subTarget": "Details",
                  "style": "link"
                }
              ]
            },
            "name": "links - zoneSubTab"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "title": "Zone Overview",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "# Availability Zones\r\n## Availability Zone Best Practice Checks\r\nThis section reviews your Azure resources for alignment with Availability Zone best practices. Recommendations focus on deploying resources across multiple zones to enhance resiliency and minimize the impact of zone-level failures. Implementing these recommendations helps ensure high availability and business continuity for your critical workloads.",
                    "style": "upsell"
                  },
                  "name": "text - AvailabilityZone"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "(\r\n    // Subquery to find all non-compliant resources and their details\r\n    (\r\n        // Sub-subquery to analyze all resources and determine their zone status\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type in~ ('Microsoft.Compute/virtualMachines','Microsoft.Compute/disks','microsoft.network/azurefirewalls','microsoft.network/applicationGateways','Microsoft.Network/publicIPAddresses','microsoft.network/virtualnetworkgateways','microsoft.network/bastionhosts','microsoft.network/loadbalancers','microsoft.sql/servers/databases','microsoft.cache/redis','microsoft.dbformysql/flexibleservers','microsoft.dbforpostgresql/flexibleservers','Microsoft.Storage/StorageAccounts','Microsoft.NetApp/netAppAccounts/capacityPools/volumes','microsoft.compute/virtualmachinescalesets','microsoft.apimanagement/service','microsoft.servicebus/namespaces','microsoft.eventhub/namespaces','microsoft.web/serverfarms','microsoft.containerregistry/registries','microsoft.app/managedenvironments')\r\n        | extend ZoneConfigured = case(\r\n            type =~ 'Microsoft.Compute/virtualMachines', array_length(coalesce(todynamic(zones), dynamic([]))) > 0,\r\n            type =~ 'Microsoft.Compute/disks', (tostring(sku.name) has_cs 'ZRS') or array_length(coalesce(todynamic(zones), dynamic([]))) > 0,\r\n            type =~ 'microsoft.network/azurefirewalls', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/applicationGateways', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'Microsoft.Network/publicIPAddresses', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/virtualnetworkgateways', tostring(properties.sku.tier) contains 'AZ',\r\n            type =~ 'microsoft.network/bastionhosts', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/loadbalancers', tolower(tostring(sku.name)) != 'basic' and array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.sql/servers/databases', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.cache/redis', not(properties.zonalAllocationPolicy != 'Automatic' and (isnull(zones) or array_length(coalesce(todynamic(zones), dynamic([]))) <= 1)),\r\n            type =~ 'microsoft.dbformysql/flexibleservers', tostring(properties.highAvailability.mode) == 'ZoneRedundant',\r\n            type =~ 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.highAvailability.mode) == 'ZoneRedundant',\r\n            type =~ 'Microsoft.Storage/StorageAccounts', tostring(sku.name) endswith_cs 'ZRS',\r\n            type =~ 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.compute/virtualmachinescalesets', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.apimanagement/service', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.servicebus/namespaces', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.eventhub/namespaces', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.web/serverfarms', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.containerregistry/registries', tostring(properties.zoneRedundancy) =~ 'Enabled',\r\n            type =~ 'microsoft.app/managedenvironments', tostring(properties.zoneRedundant) !~ 'false',\r\n            false)\r\n        | project id, type, ZoneConfigured\r\n    )\r\n    | union (\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type =~ 'microsoft.documentdb/databaseaccounts'\r\n        | mv-expand loc = properties.locations | extend z = tobool(loc.isZoneRedundant) | summarize ZoneConfigured = max(z) by id, type\r\n    )\r\n    | union (\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type =~ 'microsoft.containerservice/managedclusters'\r\n        | mv-expand pool = properties.agentPoolProfiles | extend z = array_length(coalesce(pool.availabilityZones, dynamic([]))) > 1 | summarize ZoneConfigured = max(z) by id, type\r\n    )\r\n    | where not(ZoneConfigured)\r\n    | extend Recommendation = case(\r\n        type =~ 'Microsoft.Compute/virtualmachines', 'Deploy VMs across Availability Zones',\r\n        type =~ 'Microsoft.Compute/disks', 'Use Azure Disks with Zone Redundant Storage',\r\n        type =~ 'microsoft.network/applicationGateways', 'Enable multi-zone Application Gateway',\r\n        type =~ 'microsoft.network/azurefirewalls', 'Deploy Azure Firewall across multiple availability zones',\r\n        type =~ 'Microsoft.Storage/StorageAccounts', 'Move to ZRS/GZRS storage',\r\n        type =~ 'microsoft.web/serverfarms', 'Enable zone redundancy on App Service Plan',\r\n        type =~ 'microsoft.containerservice/managedclusters', 'Use multi-zone AKS node pools',\r\n        type =~ 'microsoft.containerregistry/registries', 'Enable ACR zone redundancy',\r\n        type =~ 'microsoft.apimanagement/service', 'Enable multi-zone API Management',\r\n        type =~ 'microsoft.servicebus/namespaces', 'Enable Service Bus zone redundancy',\r\n        type =~ 'microsoft.eventhub/namespaces', 'Enable Event Hub zone redundancy',\r\n        type =~ 'microsoft.cache/redis', 'Enable Redis zone redundancy',\r\n        type =~ 'microsoft.dbformysql/flexibleservers', 'Enable MySQL zone-redundant HA',\r\n        type =~ 'microsoft.dbforpostgresql/flexibleservers', 'Enable PostgreSQL zone-redundant HA',\r\n        type =~ 'microsoft.documentdb/databaseaccounts', 'Enable Cosmos DB zone redundancy',\r\n        type =~ 'microsoft.network/loadbalancers', 'Use zone-redundant Standard Load Balancer',\r\n        type =~ 'microsoft.network/virtualnetworkgateways', 'Use AZ SKU Virtual Network Gateway',\r\n        type =~ 'microsoft.network/publicipaddresses', 'Create / convert to zone-redundant Public IP',\r\n        type =~ 'microsoft.network/bastionhosts', 'Deploy Bastion host across zones',\r\n        type =~ 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', 'Review ANF multi-zone deployment',\r\n        type =~ 'microsoft.app/managedenvironments', 'Enable Container Apps env zone redundancy',\r\n        type =~ 'microsoft.compute/virtualmachinescalesets', 'Distribute VM Scale Set across zones',\r\n        '')\r\n    | extend\r\n        ImplementationImpact = case(Recommendation == 'Deploy VMs across Availability Zones', 'High', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'Medium', Recommendation == 'Enable multi-zone Application Gateway', 'Medium', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'Medium', Recommendation == 'Move to ZRS/GZRS storage', 'Low', Recommendation == 'Enable zone redundancy on App Service Plan', 'Low', Recommendation == 'Use multi-zone AKS node pools', 'Medium', Recommendation == 'Enable ACR zone redundancy', 'Low', Recommendation == 'Enable Service Bus zone redundancy', 'Medium', Recommendation == 'Enable Event Hub zone redundancy', 'Medium', Recommendation == 'Enable Redis zone redundancy', 'Medium', Recommendation == 'Enable MySQL zone-redundant HA', 'Medium', Recommendation == 'Enable PostgreSQL zone-redundant HA', 'Medium', Recommendation == 'Enable Cosmos DB zone redundancy', 'Medium', Recommendation == 'Use zone-redundant Standard Load Balancer', 'Low', Recommendation == 'Use AZ SKU Virtual Network Gateway', 'Medium', Recommendation == 'Create / convert to zone-redundant Public IP', 'Low', Recommendation == 'Deploy Bastion host across zones', 'Low', Recommendation == 'Review ANF multi-zone deployment', 'Medium', Recommendation == 'Enable Container Apps env zone redundancy', 'Low', Recommendation == 'Distribute VM Scale Set across zones', 'Medium', ''),\r\n        ImplementationComplexity = case(Recommendation == 'Deploy VMs across Availability Zones', 'Low', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'Medium', Recommendation == 'Enable multi-zone Application Gateway', 'Medium', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'Medium', Recommendation == 'Move to ZRS/GZRS storage', 'Low', Recommendation == 'Enable zone redundancy on App Service Plan', 'Low', Recommendation == 'Use multi-zone AKS node pools', 'Medium', Recommendation == 'Enable ACR zone redundancy', 'Low', Recommendation == 'Enable Service Bus zone redundancy', 'Medium', Recommendation == 'Enable Event Hub zone redundancy', 'Medium', Recommendation == 'Enable Redis zone redundancy', 'Medium', Recommendation == 'Enable MySQL zone-redundant HA', 'Medium', Recommendation == 'Enable PostgreSQL zone-redundant HA', 'Medium', Recommendation == 'Enable Cosmos DB zone redundancy', 'Medium', Recommendation == 'Use zone-redundant Standard Load Balancer', 'Low', Recommendation == 'Use AZ SKU Virtual Network Gateway', 'Medium', Recommendation == 'Create / convert to zone-redundant Public IP', 'Low', Recommendation == 'Deploy Bastion host across zones', 'Low', Recommendation == 'Review ANF multi-zone deployment', 'Medium', Recommendation == 'Enable Container Apps env zone redundancy', 'Low', Recommendation == 'Distribute VM Scale Set across zones', 'Medium', ''),\r\n        RecommendationId = case(Recommendation == 'Deploy VMs across Availability Zones', '2bd0be95-a825-6f47-a8c6-3db1fb5eb387', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'fa0cf4f5-0b21-47b7-89a9-ee936f193ce1', Recommendation == 'Enable multi-zone Application Gateway', '5c488377-be3e-4365-92e8-09d1e8d9038c', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'e82f5b61-b0f8-48e7-8e18-5aa1f57bff81', Recommendation == 'Move to ZRS/GZRS storage', 'e6c7e1cc-2f47-264d-aa50-1da421314472', Recommendation == 'Enable zone redundancy on App Service Plan', '88cb90c2-3b99-814b-9820-821a63f600dd', Recommendation == 'Use multi-zone AKS node pools', '9f3263db-b9c0-43bb-8523-6800f9f50793', Recommendation == 'Enable ACR zone redundancy', '63491f70-22e4-3b4a-8b0c-845450e46fac', Recommendation == 'Enable Service Bus zone redundancy', '9dff9f9b-1e61-4fbf-9168-c0432240c53b', Recommendation == 'Enable Event Hub zone redundancy', '0f1bfad1-1f47-44dd-a858-71cc2610b9d4', Recommendation == 'Enable Redis zone redundancy', '5a44bd30-ae6a-4b81-9b68-dc3a8ffca4d8', Recommendation == 'Enable MySQL zone-redundant HA', '88856605-53d8-4bbd-a75b-4a7b14939d32', Recommendation == 'Enable PostgreSQL zone-redundant HA', '80b4e93c-4500-4fbd-bd6f-3ec245f72be9', Recommendation == 'Enable Cosmos DB zone redundancy', '921631f6-ed59-49a5-94c1-f0f3ececa580', Recommendation == 'Use zone-redundant Standard Load Balancer', '332e07de-da0d-4ee7-b1c4-ca9016005e1d', Recommendation == 'Use AZ SKU Virtual Network Gateway', '1afa00b3-bb4c-496d-99e5-b7bda59a057c', Recommendation == 'Create / convert to zone-redundant Public IP', 'c63b81fb-7afc-894c-a840-91bb8a8dcfaf', Recommendation == 'Deploy Bastion host across zones', 'c9b0c6f6-1f64-4b4b-8165-00770b295dd7', Recommendation == 'Review ANF multi-zone deployment', '47d100a5-7f85-5742-967a-67eb5081240a', Recommendation == 'Enable Container Apps env zone redundancy', '8dbcd94b-0948-4df3-b608-1946726c3abf', Recommendation == 'Distribute VM Scale Set across zones', '1422c567-782c-7148-ac7c-5fc14cf45adc', '')\r\n    | where isnotempty(Recommendation)\r\n    | project id, type, Recommendation, RecommendationId, ImplementationImpact, ImplementationComplexity\r\n)\r\n| join kind=leftouter (\r\n    // Subquery to get the total count of all relevant resources by type\r\n    resources\r\n    | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type in~ ('Microsoft.Compute/virtualMachines','Microsoft.Compute/disks','microsoft.network/azurefirewalls','microsoft.network/applicationGateways','Microsoft.Network/publicIPAddresses','microsoft.network/virtualnetworkgateways','microsoft.network/bastionhosts','microsoft.network/loadbalancers','microsoft.sql/servers/databases','microsoft.cache/redis','microsoft.dbformysql/flexibleservers','microsoft.dbforpostgresql/flexibleservers','Microsoft.Storage/StorageAccounts','Microsoft.NetApp/netAppAccounts/capacityPools/volumes','microsoft.compute/virtualmachinescalesets','microsoft.apimanagement/service','microsoft.servicebus/namespaces','microsoft.eventhub/namespaces','microsoft.web/serverfarms','microsoft.containerregistry/registries','microsoft.app/managedenvironments','microsoft.documentdb/databaseaccounts','microsoft.containerservice/managedclusters')\r\n    | summarize Total = count() by type\r\n) on type\r\n| summarize ImpactedCount = count() by RecommendationId, type, Recommendation, ImplementationImpact, ImplementationComplexity, Total\r\n| extend ImpactedResources = strcat(ImpactedCount, '/', Total)\r\n| project Recommendation, type, ImpactedResources, ImplementationImpact, ImplementationComplexity,RecommendationId\r\n| order by RecommendationId",
                    "size": 0,
                    "title": "Recommendation by Impact",
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "visualization": "tiles",
                    "sortBy": [],
                    "tileSettings": {
                      "titleContent": {
                        "columnMatch": "Recommendation"
                      },
                      "subtitleContent": {
                        "columnMatch": "type"
                      },
                      "leftContent": {
                        "columnMatch": "ImpactedResources",
                        "formatter": 12,
                        "formatOptions": {
                          "palette": "auto"
                        },
                        "tooltipFormat": {
                          "tooltip": "Number of impacted resources / Total resources"
                        }
                      },
                      "secondaryContent": {
                        "columnMatch": "RecommendationId"
                      },
                      "showBorder": true,
                      "size": "auto",
                      "styleSettings": {
                        "borderStyle": "rounded"
                      }
                    }
                  },
                  "name": "visualImplementationImpact-Zone"
                },
                {
                  "type": 3,
                  "content": {
                    "version": "KqlItem/1.0",
                    "query": "(\r\n    // Subquery to find all non-compliant resources and their details\r\n    (\r\n        // Sub-subquery to analyze all resources and determine their zone status\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type in~ ('Microsoft.Compute/virtualMachines','Microsoft.Compute/disks','microsoft.network/azurefirewalls','microsoft.network/applicationGateways','Microsoft.Network/publicIPAddresses','microsoft.network/virtualnetworkgateways','microsoft.network/bastionhosts','microsoft.network/loadbalancers','microsoft.sql/servers/databases','microsoft.cache/redis','microsoft.dbformysql/flexibleservers','microsoft.dbforpostgresql/flexibleservers','Microsoft.Storage/StorageAccounts','Microsoft.NetApp/netAppAccounts/capacityPools/volumes','microsoft.compute/virtualmachinescalesets','microsoft.apimanagement/service','microsoft.servicebus/namespaces','microsoft.eventhub/namespaces','microsoft.web/serverfarms','microsoft.containerregistry/registries','microsoft.app/managedenvironments')\r\n        | extend ZoneConfigured = case(\r\n            type =~ 'Microsoft.Compute/virtualMachines', array_length(coalesce(todynamic(zones), dynamic([]))) > 0,\r\n            type =~ 'Microsoft.Compute/disks', (tostring(sku.name) has_cs 'ZRS') or array_length(coalesce(todynamic(zones), dynamic([]))) > 0,\r\n            type =~ 'microsoft.network/azurefirewalls', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/applicationGateways', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'Microsoft.Network/publicIPAddresses', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/virtualnetworkgateways', tostring(properties.sku.tier) contains 'AZ',\r\n            type =~ 'microsoft.network/bastionhosts', array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.network/loadbalancers', tolower(tostring(sku.name)) != 'basic' and array_length(coalesce(todynamic(zones), dynamic([]))) >= 2,\r\n            type =~ 'microsoft.sql/servers/databases', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.cache/redis', not(properties.zonalAllocationPolicy != 'Automatic' and (isnull(zones) or array_length(coalesce(todynamic(zones), dynamic([]))) <= 1)),\r\n            type =~ 'microsoft.dbformysql/flexibleservers', tostring(properties.highAvailability.mode) == 'ZoneRedundant',\r\n            type =~ 'microsoft.dbforpostgresql/flexibleservers', tostring(properties.highAvailability.mode) == 'ZoneRedundant',\r\n            type =~ 'Microsoft.Storage/StorageAccounts', tostring(sku.name) endswith_cs 'ZRS',\r\n            type =~ 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.compute/virtualmachinescalesets', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.apimanagement/service', array_length(coalesce(todynamic(zones), dynamic([]))) > 1,\r\n            type =~ 'microsoft.servicebus/namespaces', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.eventhub/namespaces', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.web/serverfarms', tobool(properties.zoneRedundant),\r\n            type =~ 'microsoft.containerregistry/registries', tostring(properties.zoneRedundancy) =~ 'Enabled',\r\n            type =~ 'microsoft.app/managedenvironments', tostring(properties.zoneRedundant) !~ 'false',\r\n            false)\r\n        | project id, type, ZoneConfigured\r\n    )\r\n    | union (\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type =~ 'microsoft.documentdb/databaseaccounts'\r\n        | mv-expand loc = properties.locations | extend z = tobool(loc.isZoneRedundant) | summarize ZoneConfigured = max(z) by id, type\r\n    )\r\n    | union (\r\n        resources\r\n        | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type =~ 'microsoft.containerservice/managedclusters'\r\n        | mv-expand pool = properties.agentPoolProfiles | extend z = array_length(coalesce(pool.availabilityZones, dynamic([]))) > 1 | summarize ZoneConfigured = max(z) by id, type\r\n    )\r\n    | where not(ZoneConfigured)\r\n    | extend Recommendation = case(\r\n        type =~ 'Microsoft.Compute/virtualmachines', 'Deploy VMs across Availability Zones',\r\n        type =~ 'Microsoft.Compute/disks', 'Use Azure Disks with Zone Redundant Storage',\r\n        type =~ 'microsoft.network/applicationGateways', 'Enable multi-zone Application Gateway',\r\n        type =~ 'microsoft.network/azurefirewalls', 'Deploy Azure Firewall across multiple availability zones',\r\n        type =~ 'Microsoft.Storage/StorageAccounts', 'Move to ZRS/GZRS storage',\r\n        type =~ 'microsoft.web/serverfarms', 'Enable zone redundancy on App Service Plan',\r\n        type =~ 'microsoft.containerservice/managedclusters', 'Use multi-zone AKS node pools',\r\n        type =~ 'microsoft.containerregistry/registries', 'Enable ACR zone redundancy',\r\n        type =~ 'microsoft.apimanagement/service', 'Enable multi-zone API Management',\r\n        type =~ 'microsoft.servicebus/namespaces', 'Enable Service Bus zone redundancy',\r\n        type =~ 'microsoft.eventhub/namespaces', 'Enable Event Hub zone redundancy',\r\n        type =~ 'microsoft.cache/redis', 'Enable Redis zone redundancy',\r\n        type =~ 'microsoft.dbformysql/flexibleservers', 'Enable MySQL zone-redundant HA',\r\n        type =~ 'microsoft.dbforpostgresql/flexibleservers', 'Enable PostgreSQL zone-redundant HA',\r\n        type =~ 'microsoft.documentdb/databaseaccounts', 'Enable Cosmos DB zone redundancy',\r\n        type =~ 'microsoft.network/loadbalancers', 'Use zone-redundant Standard Load Balancer',\r\n        type =~ 'microsoft.network/virtualnetworkgateways', 'Use AZ SKU Virtual Network Gateway',\r\n        type =~ 'microsoft.network/publicipaddresses', 'Create / convert to zone-redundant Public IP',\r\n        type =~ 'microsoft.network/bastionhosts', 'Deploy Bastion host across zones',\r\n        type =~ 'Microsoft.NetApp/netAppAccounts/capacityPools/volumes', 'Review ANF multi-zone deployment',\r\n        type =~ 'microsoft.app/managedenvironments', 'Enable Container Apps env zone redundancy',\r\n        type =~ 'microsoft.compute/virtualmachinescalesets', 'Distribute VM Scale Set across zones',\r\n        '')\r\n    | extend\r\n        ImplementationImpact = case(Recommendation == 'Deploy VMs across Availability Zones', 'High', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'Medium', Recommendation == 'Enable multi-zone Application Gateway', 'Medium', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'Medium', Recommendation == 'Move to ZRS/GZRS storage', 'Low', Recommendation == 'Enable zone redundancy on App Service Plan', 'Low', Recommendation == 'Use multi-zone AKS node pools', 'Medium', Recommendation == 'Enable ACR zone redundancy', 'Low', Recommendation == 'Enable Service Bus zone redundancy', 'Medium', Recommendation == 'Enable Event Hub zone redundancy', 'Medium', Recommendation == 'Enable Redis zone redundancy', 'Medium', Recommendation == 'Enable MySQL zone-redundant HA', 'Medium', Recommendation == 'Enable PostgreSQL zone-redundant HA', 'Medium', Recommendation == 'Enable Cosmos DB zone redundancy', 'Medium', Recommendation == 'Use zone-redundant Standard Load Balancer', 'Low', Recommendation == 'Use AZ SKU Virtual Network Gateway', 'Medium', Recommendation == 'Create / convert to zone-redundant Public IP', 'Low', Recommendation == 'Deploy Bastion host across zones', 'Low', Recommendation == 'Review ANF multi-zone deployment', 'Medium', Recommendation == 'Enable Container Apps env zone redundancy', 'Low', Recommendation == 'Distribute VM Scale Set across zones', 'Medium', ''),\r\n        ImplementationComplexity = case(Recommendation == 'Deploy VMs across Availability Zones', 'Low', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'Medium', Recommendation == 'Enable multi-zone Application Gateway', 'Medium', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'Medium', Recommendation == 'Move to ZRS/GZRS storage', 'Low', Recommendation == 'Enable zone redundancy on App Service Plan', 'Low', Recommendation == 'Use multi-zone AKS node pools', 'Medium', Recommendation == 'Enable ACR zone redundancy', 'Low', Recommendation == 'Enable Service Bus zone redundancy', 'Medium', Recommendation == 'Enable Event Hub zone redundancy', 'Medium', Recommendation == 'Enable Redis zone redundancy', 'Medium', Recommendation == 'Enable MySQL zone-redundant HA', 'Medium', Recommendation == 'Enable PostgreSQL zone-redundant HA', 'Medium', Recommendation == 'Enable Cosmos DB zone redundancy', 'Medium', Recommendation == 'Use zone-redundant Standard Load Balancer', 'Low', Recommendation == 'Use AZ SKU Virtual Network Gateway', 'Medium', Recommendation == 'Create / convert to zone-redundant Public IP', 'Low', Recommendation == 'Deploy Bastion host across zones', 'Low', Recommendation == 'Review ANF multi-zone deployment', 'Medium', Recommendation == 'Enable Container Apps env zone redundancy', 'Low', Recommendation == 'Distribute VM Scale Set across zones', 'Medium', ''),\r\n        RecommendationId = case(Recommendation == 'Deploy VMs across Availability Zones', '2bd0be95-a825-6f47-a8c6-3db1fb5eb387', Recommendation == 'Use Azure Disks with Zone Redundant Storage', 'fa0cf4f5-0b21-47b7-89a9-ee936f193ce1', Recommendation == 'Enable multi-zone Application Gateway', '5c488377-be3e-4365-92e8-09d1e8d9038c', Recommendation == 'Deploy Azure Firewall across multiple availability zones', 'e82f5b61-b0f8-48e7-8e18-5aa1f57bff81', Recommendation == 'Move to ZRS/GZRS storage', 'e6c7e1cc-2f47-264d-aa50-1da421314472', Recommendation == 'Enable zone redundancy on App Service Plan', '88cb90c2-3b99-814b-9820-821a63f600dd', Recommendation == 'Use multi-zone AKS node pools', '9f3263db-b9c0-43bb-8523-6800f9f50793', Recommendation == 'Enable ACR zone redundancy', '63491f70-22e4-3b4a-8b0c-845450e46fac', Recommendation == 'Enable Service Bus zone redundancy', '9dff9f9b-1e61-4fbf-9168-c0432240c53b', Recommendation == 'Enable Event Hub zone redundancy', '0f1bfad1-1f47-44dd-a858-71cc2610b9d4', Recommendation == 'Enable Redis zone redundancy', '5a44bd30-ae6a-4b81-9b68-dc3a8ffca4d8', Recommendation == 'Enable MySQL zone-redundant HA', '88856605-53d8-4bbd-a75b-4a7b14939d32', Recommendation == 'Enable PostgreSQL zone-redundant HA', '80b4e93c-4500-4fbd-bd6f-3ec245f72be9', Recommendation == 'Enable Cosmos DB zone redundancy', '921631f6-ed59-49a5-94c1-f0f3ececa580', Recommendation == 'Use zone-redundant Standard Load Balancer', '332e07de-da0d-4ee7-b1c4-ca9016005e1d', Recommendation == 'Use AZ SKU Virtual Network Gateway', '1afa00b3-bb4c-496d-99e5-b7bda59a057c', Recommendation == 'Create / convert to zone-redundant Public IP', 'c63b81fb-7afc-894c-a840-91bb8a8dcfaf', Recommendation == 'Deploy Bastion host across zones', 'c9b0c6f6-1f64-4b4b-8165-00770b295dd7', Recommendation == 'Review ANF multi-zone deployment', '47d100a5-7f85-5742-967a-67eb5081240a', Recommendation == 'Enable Container Apps env zone redundancy', '8dbcd94b-0948-4df3-b608-1946726c3abf', Recommendation == 'Distribute VM Scale Set across zones', '1422c567-782c-7148-ac7c-5fc14cf45adc', '')\r\n    | where isnotempty(Recommendation)\r\n    | project id, type, Recommendation, RecommendationId, ImplementationImpact, ImplementationComplexity\r\n)\r\n| join kind=leftouter (\r\n    // Subquery to get the total count of all relevant resources by type\r\n    resources\r\n    | where resourceGroup in ({ResourceGroup}) and location in~ ({ZonalRegions}) and type in~ ('Microsoft.Compute/virtualMachines','Microsoft.Compute/disks','microsoft.network/azurefirewalls','microsoft.network/applicationGateways','Microsoft.Network/publicIPAddresses','microsoft.network/virtualnetworkgateways','microsoft.network/bastionhosts','microsoft.network/loadbalancers','microsoft.sql/servers/databases','microsoft.cache/redis','microsoft.dbformysql/flexibleservers','microsoft.dbforpostgresql/flexibleservers','Microsoft.Storage/StorageAccounts','Microsoft.NetApp/netAppAccounts/capacityPools/volumes','microsoft.compute/virtualmachinescalesets','microsoft.apimanagement/service','microsoft.servicebus/namespaces','microsoft.eventhub/namespaces','microsoft.web/serverfarms','microsoft.containerregistry/registries','microsoft.app/managedenvironments','microsoft.documentdb/databaseaccounts','microsoft.containerservice/managedclusters')\r\n    | summarize Total = count() by type\r\n) on type\r\n| summarize ImpactedCount = count() by RecommendationId, type, Recommendation, ImplementationImpact, ImplementationComplexity, Total\r\n| extend ImpactedResources = strcat(ImpactedCount, '/', Total)\r\n| project Recommendation, type, ImpactedResources, ImplementationImpact, ImplementationComplexity,RecommendationId\r\n| order by RecommendationId",
                    "size": 0,
                    "showAnalytics": true,
                    "title": "Multi zone recommendations",
                    "showRefreshButton": true,
                    "showExportToExcel": true,
                    "queryType": 1,
                    "resourceType": "microsoft.resourcegraph/resources",
                    "crossComponentResources": [
                      "{Subscription}"
                    ],
                    "gridSettings": {
                      "sortBy": [
                        {
                          "itemKey": "ImplementationComplexity",
                          "sortOrder": 1
                        }
                      ]
                    },
                    "sortBy": [
                      {
                        "itemKey": "ImplementationComplexity",
                        "sortOrder": 1
                      }
                    ]
                  },
                  "name": "Executive insights-zone"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "SelectedSubTab",
              "comparison": "isEqualTo",
              "value": "Overview"
            },
            "name": "groupZoneOverview"
          },
          {
            "type": 12,
            "content": {
              "version": "NotebookGroup/1.0",
              "groupType": "editable",
              "items": [
                {
                  "type": 1,
                  "content": {
                    "json": "# Workload Availability Zones Coverage Details\r\n\r\n>NOTE: You will find detailed insights into your scoped workloads specific configuration relating to Availability Zones. ",
                    "style": "upsell"
                  },
                  "name": "text - 6"
                },
                {
                  "type": 11,
                  "content": {
                    "version": "LinkItem/1.0",
                    "style": "tabs",
                    "links": [
                      {
                        "id": "b95af288-2738-4afa-87b9-eed0f729f3fe",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Network Services",
                        "subTarget": "network",
                        "style": "link"
                      },
                      {
                        "id": "847aefe6-be4a-4033-85e0-c74ab570ad1e",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Data Services",
                        "subTarget": "Data",
                        "style": "link"
                      },
                      {
                        "id": "499fa94f-a180-4cbb-8a77-79a43a965d0e",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Storage Services",
                        "subTarget": "storage",
                        "style": "link"
                      },
                      {
                        "id": "866bc76f-c9f2-4bec-a5a1-7893fd298179",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Compute Services",
                        "subTarget": "compute",
                        "preText": "Compute",
                        "style": "link"
                      },
                      {
                        "id": "ac71eb6a-a601-4d10-a6ae-7a5a0cecc4da",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Integration Services",
                        "subTarget": "integrationServices",
                        "style": "link"
                      },
                      {
                        "id": "f7fe5554-b6cd-41e1-ba69-6b480ea4db15",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "App Services",
                        "subTarget": "app",
                        "style": "link"
                      },
                      {
                        "id": "6bb1d5e2-1063-49c5-943a-f61f94e98271",
                        "cellValue": "selectedDetailsTab",
                        "linkTarget": "parameter",
                        "linkLabel": "Container Services",
                        "subTarget": "containerServices",
                        "style": "link"
                      }
                    ]
                  },
                  "name": "links - 4"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Azure Networking Services Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type == 'microsoft.network/azurefirewalls'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = iif(array_length(zones) >= 2, \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Firewalls",
                          "noDataMessage": "All Azure Firewalls have availabilty zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "true",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-azFW"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"microsoft.network/applicationGateways\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = iif(array_length(zones) >= 2, \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Application Gateways",
                          "noDataMessage": "All Application Gateways have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "true",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-app-gateways"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"Microsoft.Network/publicIPAddresses\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n|extend zones = zones\r\n| extend zoneRedundant = iif(array_length(zones) >= 2, \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Public IPs",
                          "noDataMessage": "All Azure Public IPs have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "false",
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-publicIPs"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"microsoft.network/virtualnetworkgateways\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend skuName = tostring(properties.sku.tier)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = iif(skuName contains 'AZ', \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Virtual Network Gateways",
                          "noDataMessage": "All Azure Virtual Network Gateways have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "false",
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000,
                            "filter": true
                          }
                        },
                        "name": "query-virtual-network-gateway-zones"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"microsoft.network/bastionhosts\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n|extend zones = zones\r\n| extend zoneRedundant = iif(array_length(zones) >= 2, \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Bastion Hosts",
                          "noDataMessage": "All Azure Bastion Hosts have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "false",
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          }
                        },
                        "name": "query-bastion-zone-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"microsoft.network/loadbalancers\" and tolower(sku.name) != 'basic'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n|extend zones = zones\r\n| extend zoneRedundant = iif(array_length(zones) >= 2, \"true\", \"false\")\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Standard Load Balancer",
                          "noDataMessage": "All Azure Standard Load Balanacers have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "false",
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          }
                        },
                        "name": "query-load-balancer-zone-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "network"
                  },
                  "name": "group-networking-details"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Data Service Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.sql/servers/databases'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = tobool(properties.zoneRedundant)\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure SQL Server",
                          "noDataMessage": "All Azure SQL Servers have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-az-sql-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.documentdb/databaseaccounts'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| mv-expand cosmosLocation = locations\r\n| extend zones=cosmosLocation.isZoneRedundant\r\n| extend zoneRedundant = case(\r\n    not(zones), false, true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Cosmos DB",
                          "noDataMessage": "All Azure Cosmos DB instances have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-documentdb-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.cache/redis'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zoneRedundant = case(\r\n    properties.zonalAllocationPolicy != \"Automatic\" and (array_length(zones) <= 1 or isnull(zones)), false, \r\n    true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Cache for Redis",
                          "noDataMessage": "All Azure Cache for Redis instances have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-cache-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where type =~ 'microsoft.dbformysql/flexibleservers'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zones = properties.highAvailability.mode\r\n| extend zoneRedundant = case(\r\n    zones != \"ZoneRedundant\" , false,  true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Database for MySQL - Flexible Server",
                          "noDataMessage": "All Azure Database for MySQL - Flexible Server instances have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-dbformysql-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where type =~ 'microsoft.dbforpostgresql/flexibleservers'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zones = properties.highAvailability.mode\r\n| extend zoneRedundant = case(\r\n    zones != \"ZoneRedundant\" , false,  true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Database for PostgreSQL - Flexible Server",
                          "noDataMessage": "All Azure Database for PostgreSQL - Flexible Server instances have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-dbforpostgresql-zones-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "Data"
                  },
                  "name": "group - Details-Data"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Storage Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'Microsoft.Storage/StorageAccounts'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend skuName = tostring(sku.name)\r\n| extend zoneRedundant = case(\r\n    sku.name endswith_cs 'ZRS', true, \r\n    false\r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,skuName,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Storage Accounts",
                          "noDataMessage": "All Azure Storage Accounts are zone redundant",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-storageaccounts-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"Microsoft.NetApp/netAppAccounts/capacityPools/volumes\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = case(\r\n    isnull(zones) or array_length(zones) <= 1, false, \r\n    true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Net App Files",
                          "noDataMessage": "All Azure Net App Files volumes have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          }
                        },
                        "name": "query-net-app-zone-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "storage"
                  },
                  "name": "group - storageAccounts"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Compute Services Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type == 'microsoft.compute/disks'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resiliencyLevel = case(\r\n    sku.name in ('Premium_ZRS', 'Standard_ZRS'), \"Zone-Redundant\",    \r\n    isnotempty(zones) and array_length(zones) > 0, \"Zonal\",    \r\n    \"Regional\"\r\n  )\r\n| join kind = innerunique( //tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,tostring(sku.name),resiliencyLevel,tostring(zones), resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Disk Storage",
                          "noDataMessage": "All disks have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "resiliencyLevel",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Zone-Redudant",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Zonal",
                                      "representation": "2",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Regional",
                                      "representation": "4",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "resourceGroup",
                                "formatter": 14,
                                "formatOptions": {
                                  "linkTarget": null,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "subscriptionId",
                                "formatter": 15,
                                "formatOptions": {
                                  "linkTarget": null,
                                  "showIcon": true
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000,
                            "filter": true,
                            "sortBy": [
                              {
                                "itemKey": "sku_name",
                                "sortOrder": 1
                              }
                            ]
                          },
                          "sortBy": [
                            {
                              "itemKey": "sku_name",
                              "sortOrder": 1
                            }
                          ]
                        },
                        "name": "query-disks-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.compute/virtualmachines'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend pinnedZone = case(\r\n    isnull(zones), false, \r\n    true \r\n  )\r\n| extend size = properties.hardwareProfile.vmSize\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,tostring(size),pinnedZone,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Virtual Machines",
                          "noDataMessage": "All Virtual Machines have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-vms-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.compute/virtualmachinescalesets'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zoneRedundant = case(\r\n    isnull(zones) or array_length(zones) <= 1, false, \r\n    true \r\n  )\r\n| extend sku = sku.name\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,tostring(sku),zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Virtual Machines Scale Sets",
                          "noDataMessage": "All Virtual Machines Scale Sets have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-vmss-zones-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "compute"
                  },
                  "name": "group - Details-Compute"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Integration Services Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.apimanagement/service'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zoneRedundant = case(\r\n    isnull(zones) or array_length(zones) <= 1, false, \r\n    true \r\n  )\r\n| extend sku = sku.name\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,tostring(sku),zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure API Management",
                          "noDataMessage": "All Azure API Management services have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-apiManagement-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.servicebus/namespaces'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zones = tostring(properties.zoneRedundant)\r\n| extend zoneRedundant = case(zones == false, false, \r\n    true \r\n  )\r\n| extend sku = sku.name\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,tostring(sku),zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Service Bus",
                          "noDataMessage": "All Azure Service Bus namespaces have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-servicebus-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type == \"microsoft.eventhub/namespaces\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = tostring(properties.zoneRedundant)\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Event Hubs",
                          "noDataMessage": "All Azure Event Hub have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ]
                        },
                        "name": "query-eventHub-zones-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "integrationServices"
                  },
                  "name": "group - Details-APIManagement"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "App Services Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.web/serverfarms'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = tostring(properties.zoneRedundant)\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "true",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query - 0"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "app"
                  },
                  "name": "group - Details-App"
                },
                {
                  "type": 12,
                  "content": {
                    "version": "NotebookGroup/1.0",
                    "groupType": "editable",
                    "title": "Azure Container Services Availability Zone Coverage",
                    "items": [
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.containerservice/managedclusters'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend sku = sku.name\r\n| extend pools = properties.agentPoolProfiles\r\n| mv-expand pool = pools\r\n| extend NodePoolName = pool.name\r\n| extend NodePoolMode = pool.mode\r\n| extend zones = pool.availabilityZones\r\n| extend zoneRedundant = case(\r\n    isnull(zones) or array_length(zones) <= 1, false, \r\n    true \r\n  )\r\n| extend zones = pool.availabilityZones\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,tostring(sku),zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Container Service (AKS)",
                          "noDataMessage": "All Azure Container Services (AKS) have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "0",
                                      "representation": "4",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "success",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-containerService-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ \"microsoft.containerregistry/registries\"\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend locations=properties.locations\r\n| extend zoneRedundant = tostring(properties.zoneRedundancy)\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| distinct id,name,zoneRedundant,resourceGroup,subscriptionId,location,tostring(tags)",
                          "size": 0,
                          "title": "Azure Container Registry",
                          "noDataMessage": "All Azure Container Registries have availability zones configured",
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "Enabled",
                                      "representation": "success",
                                      "text": "{0}{1}"
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "failed",
                                      "text": "{0}{1}"
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        "name": "query-containerRegistry-zones-details"
                      },
                      {
                        "type": 3,
                        "content": {
                          "version": "KqlItem/1.0",
                          "query": "resources\r\n| where resourceGroup in ({ResourceGroup})\r\n| where type =~ 'microsoft.app/managedenvironments'\r\n| where location in~ ({ZonalRegions:value})\r\n| extend resourceGroup = strcat('/subscriptions/',subscriptionId,'/resourceGroups/',resourceGroup)\r\n| extend subscriptionId = strcat('/subscriptions/',subscriptionId)\r\n| extend zoneRedundant = case(\r\n    properties.zoneRedundant == \"false\", false, \r\n    true \r\n  )\r\n| join kind = innerunique( //Tag filter\r\n    resources\r\n    | extend replaced_tags = replace('{}', 'null', tostring(tags))\r\n    | extend replaced_tags = parse_json(replaced_tags)\r\n    | mv-expand replaced_tags\r\n    | extend tagName = tostring(bag_keys(replaced_tags)[0])\r\n    | extend tagValue = tostring(replaced_tags['{TagName}']), WindowsId=id\r\n    | where tagName has '{TagName}' and tagValue has '{TagValue}'\r\n    )\r\n    on id\r\n| project id,name,zoneRedundant,tostring(zones),resourceGroup,subscriptionId,location,tags",
                          "size": 0,
                          "title": "Azure Container Apps environments",
                          "noDataMessage": "All Azure Container Apps environments have availability zones configured",
                          "noDataMessageStyle": 3,
                          "queryType": 1,
                          "resourceType": "microsoft.resourcegraph/resources",
                          "crossComponentResources": [
                            "{Subscription}"
                          ],
                          "gridSettings": {
                            "formatters": [
                              {
                                "columnMatch": "pinnedZone",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              },
                              {
                                "columnMatch": "zoneRedundant",
                                "formatter": 18,
                                "formatOptions": {
                                  "thresholdsOptions": "icons",
                                  "thresholdsGrid": [
                                    {
                                      "operator": "==",
                                      "thresholdValue": "1",
                                      "representation": "success",
                                      "text": ""
                                    },
                                    {
                                      "operator": "Default",
                                      "thresholdValue": null,
                                      "representation": "4",
                                      "text": ""
                                    }
                                  ]
                                }
                              }
                            ],
                            "rowLimit": 1000
                          },
                          "sortBy": []
                        },
                        "name": "query-app-zones-details"
                      }
                    ]
                  },
                  "conditionalVisibility": {
                    "parameterName": "selectedDetailsTab",
                    "comparison": "isEqualTo",
                    "value": "containerServices"
                  },
                  "name": "group - Details-ContainerService"
                }
              ]
            },
            "conditionalVisibility": {
              "parameterName": "SelectedSubTab",
              "comparison": "isEqualTo",
              "value": "Details"
            },
            "name": "details-group"
          }
        ]
      },
      "name": "groupZoneAdoption"
    }
  ],
  "fallbackResourceIds": [
    "Azure Monitor"
  ],
  "$schema": "https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json"
}